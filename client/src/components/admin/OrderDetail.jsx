import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { getOrderDetail, updateTrackingNumber } from "../../api/admin";
import useEcomStore from "../../store/ecom-store";
import { toast } from "react-toastify";

const OrderDetail = () => {
  const { orderId } = useParams(); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å id ‡πÄ‡∏õ‡πá‡∏ô orderId ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö AppRoutes.jsx
  const token = useEcomStore((state) => state.token);
  const [order, setOrder] = useState(null);
  const [trackingNumber, setTrackingNumber] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    console.log("Current URL Path:", window.location.pathname);
    if (orderId) {
      fetchOrderDetail(orderId);
    }
  }, [orderId]);

  const fetchOrderDetail = async (orderId) => {
    try {
      setLoading(true);
      const res = await getOrderDetail(token, orderId);
      console.log("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", res.data); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ orderedBy ‡πÑ‡∏´‡∏°
      setOrder(res.data);
      setTrackingNumber(res.data.trackingNumber || "");
    } catch (err) {
      console.error("Error fetching order details:", err);
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  };
  

  const handleUpdateTracking = async () => {
    try {
      await updateTrackingNumber(token, orderId, trackingNumber);
      toast.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
      fetchOrderDetail(orderId);
    } catch (err) {
      console.error("Error updating tracking number:", err);
      toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏î‡πâ");
    }
  };

  if (loading) return <p className="text-center">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå...</p>;
  if (!order) return <p className="text-center text-red-500">‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</p>;

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white shadow-md rounded-md mt-10">
      <h2 className="text-xl font-bold text-center mb-4">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</h2>
      <div className="border p-4 rounded-md">
        <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á:</strong> {order?.orderedBy?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
        <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> {order?.orderedBy?.phone || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
        <p><strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> {order?.orderedBy?.address || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
      </div>
      <div className="mt-4">
        <label className="block text-sm font-semibold">‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏</label>
        <input
          type="text"
          value={trackingNumber}
          onChange={(e) => setTrackingNumber(e.target.value)}
          className="w-full p-2 border rounded-md"
        />
        <button
          onClick={handleUpdateTracking}
          className="mt-2 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
        >
          ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏
        </button>
      </div>
    </div>
  );
};

export { OrderDetail };

